generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Banner {
  fileId     String
  fileBase64 String?
  createdAt  DateTime @default(now())
  uuid       String   @id @default(uuid())
  fileUrl    String?
  fileName   String?
}

model Travel {
  name            String
  route           String
  description     String
  duration        String
  sightseeingTime String
  drivingTime     String
  drivingDistance String
  included        String?       @default("")
  notIncluded     String?       @default("")
  reservation     String?       @default("")
  createdAt       DateTime      @default(now())
  travelImageId   String?
  uuid            String        @id @default(uuid())
  time            Time          @default(hour)
  travelType      travelType
  mapImageId      String?       @default(uuid())
  pricesPerCar    PricingTier[]
  mapImage        TravelImage?  @relation("TravelMapImage", fields: [mapImageId], references: [uuid])
  travelImage     TravelImage?  @relation("TravelImage", fields: [travelImageId], references: [uuid])
  itinerary       Itinerary[]   @relation("ItineraryToTravel")
}

model Car {
  capacity       Int
  included       String?
  uuid           String           @id @default(uuid())
  carType        String
  models         String[]
  pictures       Picture[]
  prices         PricingTier[]
  transferOption TransferOption[]
}

model Picture {
  fileId    String
  fileName  String
  createdAt DateTime @default(now())
  uuid      String   @id @default(uuid())
  carId     String
  fileUrl   String?
  car       Car      @relation(fields: [carId], references: [uuid])
}

model PricingTier {
  id       Int     @id @default(autoincrement())
  carId    String?
  travelId String?
  distance String
  price    Int
  car      Car?    @relation(fields: [carId], references: [uuid])
  travel   Travel? @relation(fields: [travelId], references: [uuid])
}

model Itinerary {
  route       String
  description String
  duration    String?
  uuid        String   @id @default(uuid())
  time        Time?    @default(hour)
  travel      Travel[] @relation("ItineraryToTravel")
}

model TravelImage {
  fileId     String
  fileBase64 String?
  createdAt  DateTime @default(now())
  uuid       String   @id @default(uuid())
  fileUrl    String?
  fileName   String?
  map        Travel[] @relation("TravelMapImage")
  travel     Travel[] @relation("TravelImage")
}

model Contact {
  map       String
  telegram  String
  whatsapp  String
  createdAt DateTime @default(now())
  uuid      String   @id @default(uuid())
}

model Gallery {
  fileId     String
  fileBase64 String?
  createdAt  DateTime @default(now())
  uuid       String   @id @default(uuid())
  index      Int      @default(autoincrement())
  fileUrl    String?
  fileName   String?
}

model TravelBanner {
  fileId     String
  fileBase64 String?
  createdAt  DateTime @default(now())
  uuid       String   @id @default(uuid())
  fileUrl    String?
  fileName   String?  @default("travelbanner.jpeg")
}

model TransferOption {
  uuid           String        @id @default(uuid())
  price          Int
  carId          String?
  transferInfoId String?
  car            Car?          @relation(fields: [carId], references: [uuid])
  transferInfo   TransferInfo? @relation(fields: [transferInfoId], references: [uuid])
}

model TransferInfo {
  uuid            String           @id @default(uuid())
  transfer        String
  time            Time
  drivingTime     String
  drivingDistance String
  transferOptions TransferOption[]
}

enum travelType {
  SHARED
  PRIVATE
}

enum Time {
  min
  hour
  day
}
